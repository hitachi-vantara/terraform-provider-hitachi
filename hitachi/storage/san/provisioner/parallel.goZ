package sanstorage

import (
	"errors"
	"sync"

	commonlog "terraform-provider-hitachi/hitachi/common/log"
)

func RunInParallel(BATCHMAX int, LOOPMAX int, routineName string, failOnFirstError bool,
	// array of functions
	funcToRun []func(interface{}) (interface{},error) ) (*sync.Map, *sync.Map, error) {
	log := commonlog.GetLogger()
	log.WriteEnter()
	defer log.WriteExit()

	var wga sync.WaitGroup
	var outMap sync.Map
	var errMap sync.Map

	// LOOPMAX := 15 //example: num of datastore
	// BATCHMAX := 10
	// start batchCount with 1
	for batchCount := 1; batchCount <= LOOPMAX; batchCount = batchCount + BATCHMAX {
		endMax := batchCount + BATCHMAX
		if endMax > LOOPMAX {
			endMax = LOOPMAX
		}

		log.WriteDebug("Start of run batch %d to %d", batchCount, endMax)

		for nth := batchCount; nth <= endMax; nth++ {
			wga.Add(1)
			log.WriteDebug("Running nth %d %s goroutine", nth, routineName)

			go func(nth int) {
				log.WriteEnter()
				defer log.WriteExit()
			
				// run the real func, example
				res, err := func()(bool,error){ res :=true; var err error; return res, err;}

				if err != nil {
					errMap.Store(nth, err)
					return
				}

				outMap.Store(nth, *res)
				errMap.Store(nth, nil)
				return
			}(nth)
		}

		log.WriteDebug("Waiting for the %d %s (nth %d to %d) goroutines to end ...", endMax, routineName, batchCount, endMax)
		wga.Wait()
		log.WriteDebug("%d to %d %s goroutines ended", batchCount, endMax, routineName)

		if  failOnFirstError == true {
			// check errors of the previous batch run
			var flagerr error
			for nth := batchCount; nth <= endMax; nth++ {
				serr, _ := errMap.Load(nth)
				if serr != nil {
					log.WriteDebug("serr: %+v", serr.(error))
					flagerr = serr.(error)
					// found first err, break
					break
				}
			}

			if flagerr != nil {
				// exit with error, don't run next batch
				return &outMap, &errMap, flagerr
			}
		}
	}

	// check for errors
	var flagerr error
	for nth := 1; nth <= LOOPMAX; nth++ {
		serr, _ := errMap.Load(nth)
		if serr != nil {
			log.WriteDebug("serr: %+v", serr.(error))
			flagerr = serr.(error)
			break
		}
	}

	return &outMap, &errMap, flagerr
}
